DOCU for REENTRANT SCANNERS:  http://sector7.xray.aps.anl.gov/~dohnarms/programming/flex/html/Reentrant-Functions.html



/////////////////
FLEX/BISON NOTES
////////////////

    Locations: a location has 2 positions: begin and end.
    Those indicate where the token starter, and where it ended.

    The strategy that we follow is that we set the start and end to equal values before every yylex call.
    When we match a rule, we progress the end value, leaving the begin intact.

    - YY_USER_ACTION Executed each time a rule matches, after yytext and yyleng were set, but before the action is triggered.
    - location.step() changes the begin to be equal to the end. It does not affect the end.






////////////////
   LLVM NOTES
////////////////
    Context:
        It is EVERYTHING! This is the wrapper of all Modules.

    Module:
        Think of it as a source file.
        Eventhow, this definition can become a bit mode flexible, if it has to. (For example, it could mean a class also)


    IRBuilder:
        http://llvm.org/doxygen/classllvm_1_1IRBuilder.html
        http://llvm.org/doxygen/classllvm_1_1IRBuilderBase.html

        A uniform API for creating instructions and inserting them into a basic block:
        either at the end of a BasicBlock, or at a specific iterator location in a block.

        The builder "remembers" in which block we are inserting commands into. dont forget to call builder.SetInsertPoint()
        before you insert anything.


    Function:
        http://llvm.org/doxygen/classllvm_1_1Function.html
        This represents a Function in all it's mighty!

    BasicBlock:
        http://llvm.org/doxygen/classllvm_1_1BasicBlock.html#details
        This represents a single basic block in LLVM. A basic block is simply a container of instructions that execute sequentially.
        THis inherits from Value. Thus, it can be referenced by instructions as such.
        For example, control flow.






/////////
EUL NOTES
/////////
Every type can have its own:
  definition of ==
  definition of []
  definition of toBoolean
  definition of toString

  constructor by literal assignment (array literal, number literal etc)



llvm will produce an ir asm file
then, use llc testOut to create a .s assembly file