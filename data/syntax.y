%output  "../src/parser/autoGenerated.EulSyntax.c"
%defines "../src/parser/autoGenerated.EulSyntax.h"
%define api.pure full
%lex-param   { void* scanner }
%lex-param   { Compiler *compiler }
%parse-param { yyscan_t scanner }
%parse-param { Compiler *compiler }

%code requires {
  #include <stdio.h>
  #include "../core/EulToken.h"
  #include "../Compiler.h"
  #include "../Compiler.Functions.h"
  #include "../core/EulToken.Functions.h"

  #define YYSTYPE EulToken*
  #define YYDEBUG 1

  #ifndef YY_TYPEDEF_YY_SCANNER_T
    #define YY_TYPEDEF_YY_SCANNER_T
    typedef void* yyscan_t;
  #endif


  int yylex();
  int yyerror();
}

//region terminals
  %token EulTokenType_INT
  %token EulTokenType_FLOAT
  %token EulTokenType_STRING
  %token EulTokenType_CHAR
  %token EulTokenType_ID

  %token EulTokenType_IF
  %token EulTokenType_FOR
  %token EulTokenType_WHILE
  %token EulTokenType_VAR
  %token EulTokenType_CONST
  %token EulTokenType_VAL

  %token EulTokenType_PLUS
  %token EulTokenType_MINUS
  %token EulTokenType_TILDE
  %token EulTokenType_NOT
  %token EulTokenType_NOT_EQUALS
  %token EulTokenType_NOT_SAME
  %token EulTokenType_AT
  %token EulTokenType_HASH
  %token EulTokenType_DOLLAR
  %token EulTokenType_PERCENT
  %token EulTokenType_ASSIGN_MOD
  %token EulTokenType_XOR
  %token EulTokenType_ASSIGN_XOR
  %token EulTokenType_BIN_AND
  %token EulTokenType_AND
  %token EulTokenType_ASSIGN_AND
  %token EulTokenType_STAR
  %token EulTokenType_ASSIGN_STAR
  %token EulTokenType_PARENTHESIS_OPEN
  %token EulTokenType_PARENTHESIS_CLOSE
  %token EulTokenType_DECREASE
  %token EulTokenType_ASSIGN_MINUS
  %token EulTokenType_ARROW
  %token EulTokenType_ASSIGN
  %token EulTokenType_EQUALS
  %token EulTokenType_SAME
  %token EulTokenType_INCREASE
  %token EulTokenType_ASSIGN_PLUS
  %token EulTokenType_SQUARE_OPEN
  %token EulTokenType_SQUARE_CLOSE
  %token EulTokenType_CURLY_OPEN
  %token EulTokenType_CURLY_CLOSE
  %token EulTokenType_BACKSLASH
  %token EulTokenType_BIN_OR
  %token EulTokenType_OR
  %token EulTokenType_ASSIGN_OR
  %token EulTokenType_SEMICOLON
  %token EulTokenType_COLON
  %token EulTokenType_SLASH
  %token EulTokenType_ASSIGN_DIV
  %token EulTokenType_QUESTION
  %token EulTokenType_DOT
  %token EulTokenType_COMMA
  %token EulTokenType_LESS
  %token EulTokenType_LESS_EQUALS
  %token EulTokenType_LSHIFT
  %token EulTokenType_ASSIGN_LSHIFT
  %token EulTokenType_MORE
  %token EulTokenType_MORE_EQUALS
  %token EulTokenType_RSHIFT
  %token EulTokenType_ASSIGN_RSHIFT
  %token EulTokenType_NL

  %token EulTokenType_ERROR
  %token EulTokenType_EOF
//endregion


//region NON TERMINALS
  %token EulTokenType_VAR_DECLARATION //Valid children: only EulSyntaxType_PARAMETER_DECLARATION
  %token EulTokenType_PROGRAM
  %token EulTokenType_SOURCE_FILE
//endregion

%start EulSyntaxType_SOURCE_FILE




//=============================================           =============================================
//=============================================   RULES   =============================================
//=============================================           =============================================
%%
EulSyntaxType_VAR_KEYWORD
  : EulTokenType_VAR
  | EulTokenType_CONST
  | EulTokenType_VAL
  ;

EulSyntaxType_LITERAL
  : EulTokenType_INT
  | EulTokenType_FLOAT
  | EulTokenType_STRING
  | EulTokenType_CHAR
  ;

EulSyntaxType_PARAMETER_DECLARATION:
  EulTokenType_ID EulTokenType_ASSIGN EulSyntaxType_EXPRESSION EulTokenType_SEMICOLON {

  }

EulSyntaxType_STATEMENT:
  EulSyntaxType_VAR_KEYWORD EulSyntaxType_PARAMETER_DECLARATION {
    EulToken* ret = $$;
    $$ = malloc(sizeof(EulToken)); //TODO free this somewhere
    //EulToken_initVarDeclaration($$, EulTokenType_VAR_DECLARATION);
  }





EulSyntaxType_EXPRESSION:
  EulSyntaxType_LITERAL {
    $$ = $1;
  } |
  EulTokenType_ID {
    $$ = $1;
  }



EulSyntaxType_STATEMENTS:
  EulSyntaxType_STATEMENT EulSyntaxType_STATEMENTS |
  EulSyntaxType_STATEMENT {
    $$ = malloc(sizeof(EulToken)); //TODO free this somewhere
    //EulToken_initVarDeclaration($$, 123);
  }



EulSyntaxType_SOURCE_FILE:
  EulSyntaxType_STATEMENTS EulTokenType_EOF {
    //compiler->src.root = $1->asNode;
    //printf("EulSyntaxType_SOURCE_FILE Parsed successfully\n"); return 0;
  }


%%


int yyerror(yyscan_t scanner, const char *msg) {
  printf("YYERROR!!! %s\n", msg);
  return 0;
}
