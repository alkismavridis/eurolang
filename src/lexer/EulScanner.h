#pragma once

#if ! defined(yyFlexLexerOnce)
#include <FlexLexer.h>
#endif

#include "../__autoGenerated__/EulParser.tab.hh"
#include "../__autoGenerated__/location.hh"



class EulScanner : public yyFlexLexer {
    //region FIELDS
    private: yy::EulParser::semantic_type *yylval = nullptr;
    //endregion






    public: EulScanner(std::istream *in) : yyFlexLexer(in) {};




   //region LOCATION UTILS
   public: static void advanceLine(yy::EulParser::location_type* loc);
   //endregion



    //region SKIPPING
    public: void skipMultiLineComment(Compiler* compiler, yy::EulParser::location_type* loc);
    public: void skipSingleLineComment(yy::EulParser::location_type* loc);
    //endregion




    //region PARSING
    public: std::shared_ptr<EulStringToken> parseStringValue(Compiler* compiler, yy::EulParser::location_type* loc);
    public: std::shared_ptr<EulCharToken> parseEscapedChar(Compiler* compiler, yy::EulParser::location_type* loc);
    //endregion


   //get rid of override virtual function warning
    using FlexLexer::yylex;
    public: virtual int yylex( yy::EulParser::semantic_type * const lval, yy::EulParser::location_type *location, EulParsingContext  *ctx );
};